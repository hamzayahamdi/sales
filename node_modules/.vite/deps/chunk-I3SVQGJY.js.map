{
  "version": 3,
  "sources": ["../../@mui/x-date-pickers-pro/SingleInputDateRangeField/SingleInputDateRangeField.js", "../../@mui/x-date-pickers-pro/SingleInputDateRangeField/useSingleInputDateRangeField.js"],
  "sourcesContent": ["'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"slots\", \"slotProps\", \"InputProps\", \"inputProps\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport MuiTextField from '@mui/material/TextField';\nimport { useThemeProps } from '@mui/material/styles';\nimport useSlotProps from '@mui/utils/useSlotProps';\nimport { refType } from '@mui/utils';\nimport { useClearableField } from '@mui/x-date-pickers/hooks';\nimport { convertFieldResponseIntoMuiTextFieldProps } from '@mui/x-date-pickers/internals';\nimport { PickersTextField } from '@mui/x-date-pickers/PickersTextField';\nimport { useSingleInputDateRangeField } from \"./useSingleInputDateRangeField.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n/**\n * Demos:\n *\n * - [DateRangeField](http://mui.com/x/react-date-pickers/date-range-field/)\n * - [Fields](https://mui.com/x/react-date-pickers/fields/)\n *\n * API:\n *\n * - [SingleInputDateRangeField API](https://mui.com/x/api/single-input-date-range-field/)\n */\nconst SingleInputDateRangeField = /*#__PURE__*/React.forwardRef(function SingleInputDateRangeField(inProps, inRef) {\n  const themeProps = useThemeProps({\n    props: inProps,\n    name: 'MuiSingleInputDateRangeField'\n  });\n  const {\n      slots,\n      slotProps,\n      InputProps,\n      inputProps\n    } = themeProps,\n    other = _objectWithoutPropertiesLoose(themeProps, _excluded);\n  const ownerState = themeProps;\n  const TextField = slots?.textField ?? (inProps.enableAccessibleFieldDOMStructure ? PickersTextField : MuiTextField);\n  const textFieldProps = useSlotProps({\n    elementType: TextField,\n    externalSlotProps: slotProps?.textField,\n    externalForwardedProps: other,\n    ownerState,\n    additionalProps: {\n      ref: inRef\n    }\n  });\n\n  // TODO: Remove when mui/material-ui#35088 will be merged\n  textFieldProps.inputProps = _extends({}, inputProps, textFieldProps.inputProps);\n  textFieldProps.InputProps = _extends({}, InputProps, textFieldProps.InputProps);\n  const fieldResponse = useSingleInputDateRangeField(textFieldProps);\n  const convertedFieldResponse = convertFieldResponseIntoMuiTextFieldProps(fieldResponse);\n  const processedFieldProps = useClearableField(_extends({}, convertedFieldResponse, {\n    slots,\n    slotProps\n  }));\n  return /*#__PURE__*/_jsx(TextField, _extends({}, processedFieldProps));\n});\nSingleInputDateRangeField.fieldType = 'single-input';\nprocess.env.NODE_ENV !== \"production\" ? SingleInputDateRangeField.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"pnpm proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * If `true`, the `input` element is focused during the first mount.\n   * @default false\n   */\n  autoFocus: PropTypes.bool,\n  className: PropTypes.string,\n  /**\n   * If `true`, a clear button will be shown in the field allowing value clearing.\n   * @default false\n   */\n  clearable: PropTypes.bool,\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).\n   * @default 'primary'\n   */\n  color: PropTypes.oneOf(['error', 'info', 'primary', 'secondary', 'success', 'warning']),\n  component: PropTypes.elementType,\n  /**\n   * String displayed between the start and the end dates.\n   * @default \"â€“\"\n   */\n  dateSeparator: PropTypes.string,\n  /**\n   * The default value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.arrayOf(PropTypes.object),\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, disable values after the current date for date components, time for time components and both for date time components.\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n  /**\n   * If `true`, disable values before the current date for date components, time for time components and both for date time components.\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n  /**\n   * @default false\n   */\n  enableAccessibleFieldDOMStructure: PropTypes.bool,\n  /**\n   * If `true`, the component is displayed in focused state.\n   */\n  focused: PropTypes.bool,\n  /**\n   * Format of the date when rendered in the input(s).\n   */\n  format: PropTypes.string,\n  /**\n   * Density of the format when rendered in the input.\n   * Setting `formatDensity` to `\"spacious\"` will add a space before and after each `/`, `-` and `.` character.\n   * @default \"dense\"\n   */\n  formatDensity: PropTypes.oneOf(['dense', 'spacious']),\n  /**\n   * Props applied to the [`FormHelperText`](/material-ui/api/form-helper-text/) element.\n   */\n  FormHelperTextProps: PropTypes.object,\n  /**\n   * If `true`, the input will take up the full width of its container.\n   * @default false\n   */\n  fullWidth: PropTypes.bool,\n  /**\n   * The helper text content.\n   */\n  helperText: PropTypes.node,\n  /**\n   * If `true`, the label is hidden.\n   * This is used to increase density for a `FilledInput`.\n   * Be sure to add `aria-label` to the `input` element.\n   * @default false\n   */\n  hiddenLabel: PropTypes.bool,\n  /**\n   * The id of the `input` element.\n   * Use this prop to make `label` and `helperText` accessible for screen readers.\n   */\n  id: PropTypes.string,\n  /**\n   * Props applied to the [`InputLabel`](/material-ui/api/input-label/) element.\n   * Pointer events like `onClick` are enabled if and only if `shrink` is `true`.\n   */\n  InputLabelProps: PropTypes.object,\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n  /**\n   * Props applied to the Input element.\n   * It will be a [`FilledInput`](/material-ui/api/filled-input/),\n   * [`OutlinedInput`](/material-ui/api/outlined-input/) or [`Input`](/material-ui/api/input/)\n   * component depending on the `variant` prop value.\n   */\n  InputProps: PropTypes.object,\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n  /**\n   * The label content.\n   */\n  label: PropTypes.node,\n  /**\n   * If `dense` or `normal`, will adjust vertical spacing of this and contained components.\n   * @default 'none'\n   */\n  margin: PropTypes.oneOf(['dense', 'none', 'normal']),\n  /**\n   * Maximal selectable date.\n   * @default 2099-12-31\n   */\n  maxDate: PropTypes.object,\n  /**\n   * Minimal selectable date.\n   * @default 1900-01-01\n   */\n  minDate: PropTypes.object,\n  /**\n   * Name attribute of the `input` element.\n   */\n  name: PropTypes.string,\n  onBlur: PropTypes.func,\n  /**\n   * Callback fired when the value changes.\n   * @template TValue The value type. It will be the same type as `value` or `null`. It can be in `[start, end]` format in case of range value.\n   * @template TError The validation error type. It will be either `string` or a `null`. It can be in `[start, end]` format in case of range value.\n   * @param {TValue} value The new value.\n   * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.\n   */\n  onChange: PropTypes.func,\n  /**\n   * Callback fired when the clear button is clicked.\n   */\n  onClear: PropTypes.func,\n  /**\n   * Callback fired when the error associated with the current value changes.\n   * When a validation error is detected, the `error` parameter contains a non-null value.\n   * This can be used to render an appropriate form error.\n   * @template TError The validation error type. It will be either `string` or a `null`. It can be in `[start, end]` format in case of range value.\n   * @template TValue The value type. It will be the same type as `value` or `null`. It can be in `[start, end]` format in case of range value.\n   * @param {TError} error The reason why the current value is not valid.\n   * @param {TValue} value The value associated with the error.\n   */\n  onError: PropTypes.func,\n  onFocus: PropTypes.func,\n  /**\n   * Callback fired when the selected sections change.\n   * @param {FieldSelectedSections} newValue The new selected sections.\n   */\n  onSelectedSectionsChange: PropTypes.func,\n  /**\n   * It prevents the user from changing the value of the field\n   * (not from interacting with the field).\n   * @default false\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * The date used to generate a part of the new value that is not present in the format when both `value` and `defaultValue` are empty.\n   * For example, on time fields it will be used to determine the date to set.\n   * @default The closest valid date using the validation props, except callbacks such as `shouldDisableDate`. Value is rounded to the most granular section used.\n   */\n  referenceDate: PropTypes.object,\n  /**\n   * If `true`, the label is displayed as required and the `input` element is required.\n   * @default false\n   */\n  required: PropTypes.bool,\n  /**\n   * The currently selected sections.\n   * This prop accepts four formats:\n   * 1. If a number is provided, the section at this index will be selected.\n   * 2. If a string of type `FieldSectionType` is provided, the first section with that name will be selected.\n   * 3. If `\"all\"` is provided, all the sections will be selected.\n   * 4. If `null` is provided, no section will be selected.\n   * If not provided, the selected sections will be handled internally.\n   */\n  selectedSections: PropTypes.oneOfType([PropTypes.oneOf(['all', 'day', 'empty', 'hours', 'meridiem', 'minutes', 'month', 'seconds', 'weekDay', 'year']), PropTypes.number]),\n  /**\n   * Disable specific date.\n   *\n   * Warning: This function can be called multiple times (for example when rendering date calendar, checking if focus can be moved to a certain date, etc.). Expensive computations can impact performance.\n   *\n   * @template TDate\n   * @param {TDate} day The date to test.\n   * @param {string} position The date to test, 'start' or 'end'.\n   * @returns {boolean} Returns `true` if the date should be disabled.\n   */\n  shouldDisableDate: PropTypes.func,\n  /**\n   * If `true`, the format will respect the leading zeroes (e.g: on dayjs, the format `M/D/YYYY` will render `8/16/2018`)\n   * If `false`, the format will always add leading zeroes (e.g: on dayjs, the format `M/D/YYYY` will render `08/16/2018`)\n   *\n   * Warning nÂ°1: Luxon is not able to respect the leading zeroes when using macro tokens (e.g: \"DD\"), so `shouldRespectLeadingZeros={true}` might lead to inconsistencies when using `AdapterLuxon`.\n   *\n   * Warning nÂ°2: When `shouldRespectLeadingZeros={true}`, the field will add an invisible character on the sections containing a single digit to make sure `onChange` is fired.\n   * If you need to get the clean value from the input, you can remove this character using `input.value.replace(/\\u200e/g, '')`.\n   *\n   * Warning nÂ°3: When used in strict mode, dayjs and moment require to respect the leading zeros.\n   * This mean that when using `shouldRespectLeadingZeros={false}`, if you retrieve the value directly from the input (not listening to `onChange`) and your format contains tokens without leading zeros, the value will not be parsed by your library.\n   *\n   * @default false\n   */\n  shouldRespectLeadingZeros: PropTypes.bool,\n  /**\n   * The size of the component.\n   */\n  size: PropTypes.oneOf(['medium', 'small']),\n  /**\n   * The props used for each component slot.\n   * @default {}\n   */\n  slotProps: PropTypes.object,\n  /**\n   * Overridable component slots.\n   * @default {}\n   */\n  slots: PropTypes.object,\n  style: PropTypes.object,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * Choose which timezone to use for the value.\n   * Example: \"default\", \"system\", \"UTC\", \"America/New_York\".\n   * If you pass values from other timezones to some props, they will be converted to this timezone before being used.\n   * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documentation} for more details.\n   * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.\n   */\n  timezone: PropTypes.string,\n  /**\n   * The ref object used to imperatively interact with the field.\n   */\n  unstableFieldRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n  /**\n   * The selected value.\n   * Used when the component is controlled.\n   */\n  value: PropTypes.arrayOf(PropTypes.object),\n  /**\n   * The variant to use.\n   * @default 'outlined'\n   */\n  variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])\n} : void 0;\nexport { SingleInputDateRangeField };", "'use client';\n\nimport * as React from 'react';\nimport { useField, useDefaultizedDateField } from '@mui/x-date-pickers/internals';\nimport { useSplitFieldProps } from '@mui/x-date-pickers/hooks';\nimport { rangeValueManager, getRangeFieldValueManager } from \"../internals/utils/valueManagers.js\";\nimport { validateDateRange } from \"../validation/index.js\";\nexport const useSingleInputDateRangeField = inProps => {\n  const props = useDefaultizedDateField(inProps);\n  const {\n    forwardedProps,\n    internalProps\n  } = useSplitFieldProps(props, 'date');\n  const fieldValueManager = React.useMemo(() => getRangeFieldValueManager({\n    dateSeparator: internalProps.dateSeparator\n  }), [internalProps.dateSeparator]);\n  return useField({\n    forwardedProps,\n    internalProps,\n    valueManager: rangeValueManager,\n    fieldValueManager,\n    validator: validateDateRange,\n    valueType: 'date'\n  });\n};"],
  "mappings": "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",
  "names": ["React", "SingleInputDateRangeField", "_jsx", "PropTypes"]
}
